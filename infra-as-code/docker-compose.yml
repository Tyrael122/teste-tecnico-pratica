x-common-healthcheck: &default-healthcheck
  interval: 5s
  timeout: 5s
  retries: 12

x-microservice-healthcheck: &microservice-healthcheck
  healthcheck:
    test: [ "CMD", "nc", "-z", "localhost", "8080" ]
    <<: *default-healthcheck

x-redis-env: &redis-env
  REDIS_HOST: ${REDIS_HOST}
  REDIS_PORT: ${REDIS_PORT}

services:
  db:
    image: mysql:9.3.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost && mysql -uroot -p${MYSQL_ROOT_PASSWORD} -e 'SELECT 1'"]
      <<: *default-healthcheck

  database-migration:
    build:
      context: ./microservico-database-migration
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: CONTAINER_INTERNAL://${KAFKA_BOOTSTRAP_SERVERS},HOST://0.0.0.0:29092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: CONTAINER_INTERNAL://${KAFKA_BOOTSTRAP_SERVERS},HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTAINER_INTERNAL:PLAINTEXT,HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: CONTAINER_INTERNAL
      KAFKA_PROCESS_ROLES: broker,controller
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1      # Auto-create __consumer_offsets
    healthcheck:
      test: nc -z kafka ${KAFKA_PORT} || exit 1
      <<: *default-healthcheck

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kraft-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy

  init-topics:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    command: >
      sh -c "
        echo 'Waiting for Kafka...';
        cub kafka-ready -b $KAFKA_BOOTSTRAP_SERVERS 1 20 &&
        kafka-topics --bootstrap-server $KAFKA_BOOTSTRAP_SERVERS --create --if-not-exists --topic cotacoes-topic --partitions 3 --replication-factor 1
      "

  redis:
    image: redis:8.0.3
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      <<: *default-healthcheck

  microservico-cotacoes:
    build:
      context: ../microservico-cotacoes
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      <<: *redis-env
    depends_on:
      init-topics:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      database-migration:
        condition: service_completed_successfully
    <<: *microservice-healthcheck

  microservico-cotacoes-publisher:
    build:
      context: ../microservico-cotacoes-publisher
      dockerfile: Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      microservico-cotacoes:
        condition: service_healthy

  microservico-estatisticas:
    build:
      context: ../microservico-estatisticas
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL}
      COTACAO_SERVICE_URL: http://microservico-cotacoes:8080
      <<: *redis-env
    depends_on:
      microservico-cotacoes:
        condition: service_healthy
    <<: *microservice-healthcheck

  microservico-operacao:
    build:
      context: ../microservico-operacoes
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL}
      COTACAO_SERVICE_URL: http://microservico-cotacoes:8080
      <<: *redis-env
    depends_on:
      microservico-cotacoes:
        condition: service_healthy
    <<: *microservice-healthcheck

  reverse-proxy:
    image: nginx:latest
    container_name: reverse-proxy
    ports:
      - "8060:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      microservico-cotacoes:
        condition: service_healthy
      microservico-estatisticas:
        condition: service_healthy
      microservico-operacao:
        condition: service_healthy
